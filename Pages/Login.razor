@page "/login"
@inject AuthService AuthService
@inject ILocalStorageService localStorage
@inject NavigationManager Navigation

<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%;">
        <h3 class="text-center mb-4 text-primary">Login to Fitness Pro</h3>

        <EditForm Model="@LoginRequest" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <InputText id="email" @bind-Value="LoginRequest.Email" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" @bind-Value="LoginRequest.Password" type="password" class="form-control" />
            </div>

            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="rememberMe" />
                <label class="form-check-label" for="rememberMe">Remember me</label>
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }

            <div class="mt-3 text-center">
                <small>Don't have an account? <a href="/register">Sign up</a></small>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest LoginRequest = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;

        var result = await AuthService.LoginAsync(LoginRequest);

        if (result is not null && result.IsSuccess && result.Data is not null)
        {
            await localStorage.SetItemAsync("token", result.Data.Token);
            await localStorage.SetItemAsync("refreshToken", result.Data.RefreshToken);
            await localStorage.SetItemAsync("expiresAt", result.Data.Exipiration);

            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            errorMessage = "❌ Login failed. Please check your credentials.";
        }
    }
}
